#!/usr/bin/env node

var fs = require('fs');
var program = require('commander');

var Manager = require('../lib/manager');
var Server = require('../lib/server');
var Client = require('../lib/client');
var Admin = require('../lib/admin');
var defaults = require('../lib/defaults');
var version = JSON.parse(fs.readFileSync(__dirname + '/../package.json', 'utf8')).version;

program
  .version(version)
  .usage('[options]')
  .option('-c, --config <path>', 'Run server with this configuration')
  .option('-pd, --deploy <path>', 'Run Manager with this process deployment')
  .option('-p, --port <port>', 'Port to bind on (Default: ' + defaults.port + ')', parseInt)
  .option('-b, --bind <host>', 'Host to bind on (Default: ' + defaults.host + ')')
  .option('-ap, --admin-port <port>', 'Port to bind Admin UI on (Default: ' + defaults.adminPort + ')', parseInt)
  .option('-ab, --admin-bind <host>', 'Host to bind Admin UI on (Default: ' + defaults.adminHost + ')')
  .option('-ah, --admin-html-file <path>', 'Path to HTML file to customize Admin UI')
  .option('--disable-ui', 'Disable Admin UI')
  .option('--quiet', "Don't show Shoal info")
  .option('--verbose', 'More verbose output')
program.name = 'shoald';
program.parse(process.argv);

var error = function(err) {
  console.warn("Error:", err.message);
  process.exit();
};

var defaults = {};
if (program.config) {
  var path = program.config;
  if (!fs.existsSync(path)) {
    error(new Error("No such file: " + path));
  }
  try {
    defaults = JSON.parse(fs.readFileSync(path).toString());
  } catch(err) {
    err.message = 'Invalid Configuration: ' + err.message;
    error(err);
  }
}

var manager = new Manager({
  verbose: program.verbose,
  quiet: program.quiet
});
var server = new Server(manager, defaults);
server.start({
  port: program.port,
  host: program.bind,
  quiet: program.quiet
});

if (program.deploy) {
  var path = program.deploy;
  if (!fs.existsSync(path)) {
    error(new Error("No such file: " + path));
  }
  var configuration = fs.readFileSync(path).toString();
  try {
    configuration = JSON.parse(configuration);
  } catch(err) {
    err.message = 'Invalid Process Configuration: ' + err.message;
    error(err);
  }
  try {
    manager.deploy(configuration);
  } catch(err) {
    error(err);
  }
}

if (!program.disableAdminUi && !defaults.disableAdminUi) {
  var host = program.host;
  if (host == "0.0.0.0") host = 'localhost';

  var adminHtmlFile = program.adminHtmlFile;
  if (adminHtmlFile) {
    if (!adminHtmlFile.match(/^\//)) adminHtmlFile = process.cwd() + '/' + adminHtmlFile;
    if (!fs.existsSync(adminHtmlFile)) {
      console.warn("HTML file does not exist:", adminHtmlFile);
      return process.exit();
    }
    if (!adminHtmlFile.match(/\.html$/)) {
      console.warn("Admin UI override file needs .html extension");
      return process.exit();
    }
  }

  var admin = new Admin(new Client({
    port: program.port,
    host: host
  }), {
    adminHtmlFile: adminHtmlFile
  });
  admin.start({
    port: program.adminPort,
    host: program.adminBind,
    quiet: program.quiet
  });
}
